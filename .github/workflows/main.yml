name: Deploy to VPS

on:
  push:
    branches:
      - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: staging
          fetch-depth: 0

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Deploy to VPS
        env:
          DEPLOY_PATH: "/root/projects/manager-be"
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
          VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
        run: |
          export SSHPASS=$VPS_PASSWORD
          SSH_OPTS="-o StrictHostKeyChecking=no -o ConnectTimeout=30"

          # Function to execute SSH commands with error handling
          ssh_exec() {
            if ! sshpass -e ssh $SSH_OPTS $VPS_USERNAME@$VPS_HOST "$1"; then
              echo "Error executing: $1"
              exit 1
            fi
          }

          # Deploy to VPS
          ssh_exec "cd $DEPLOY_PATH && \
            # Backup important files
            if [ -d certbot ]; then cp -r certbot certbot_backup; fi && \
            
            # Clean untracked files
            git clean -fd && \
            
            # Fetch and reset to match remote
            git fetch origin staging && \
            git reset --hard origin/staging && \
            
            # Restore certbot backup
            if [ -d certbot_backup ]; then \
              rm -rf certbot && \
              mv certbot_backup certbot; \
            fi && \
            
            # Create temporary HTTP-only nginx config
            cat > nginx.conf.http << 'EOL'
            server {
                listen 80;
                listen [::]:80;
                server_name phatd.xyz www.phatd.xyz;
                
                location ^~ /.well-known/acme-challenge/ {
                    allow all;
                    root /var/www/certbot;
                    try_files \$uri =404;
                }

                location / {
                    proxy_pass http://app:8000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOL
            
            # Use HTTP-only config temporarily
            mv nginx.conf.http nginx.conf && \
            
            # Start services with HTTP config
            docker-compose down && \
            docker-compose up -d && \
            
            # Wait for nginx to start
            sleep 10 && \
            
            # Run certbot
            ./init-letsencrypt.sh && \
            
            # Restore full HTTPS config and restart
            git checkout nginx.conf && \
            docker-compose restart nginx && \
            
            # Show status
            docker-compose ps"
